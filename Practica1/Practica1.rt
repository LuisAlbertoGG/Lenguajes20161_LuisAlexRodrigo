
#lang plai

#|
 #pow - Define la funci´on pow tal que toma dos n´umeros enteros positivos z y w y regresa el numero que se
 #obtiene de elevar el numero z a la potencia w, i.e.
|#

(define (pow x y)

  ;caso base cuando x^0 =1
  (cond
    [(= y 0)1] ; si x^0 =0
          ;base potencias de la base *exponente-1
    [else (* x(pow x (- y 1)))]));llamada recursiva
    
    #|
    # >(test (pow 2 7) 128)
    # >(test (pow 5 1) 5)
    # >(test (pow 8 0) 1)
    # >(test (pow 7 3) 343)
    # >(test (pow 3 7) 2187)
    #|
  
  #|
  #
  #average - Dado una lista no vac´ıa de n´umeros, regresar el promedio de esta, i.e.
  |#
  (define (average lista)
  (define (suma lista) 
  (cond
    [(empty? lista) 0] ;si la lista es vacia
    [(= 1(length lista)) (car lista)]
    ;(+(car lista)(pro (cdr lista)))
    [ (+(car lista)(suma (cdr lista)))]))
  (/(suma lista )(length lista)))
  
  #|
  #Dadas dos listas, regresar una lista cuyos elementos son listas de tama˜nos dos, tal que par la i-´esima
  #lista, el primer elemento es el i-´esimo de la primera lista original y el segundo elemento es el i-´esimo de la
  #segunda lista original, si una lista es de menor tama˜no que la otra, la lista resultante es del tama˜no de la
  #menor, y si una de las listas es vac´ıa, regresar una lista vac´ıa, i
  |#
  
  (define (zip L R)
  (cond
    [(and (< 1(length L)) (< 1(length R)))
     (list (list(car L ) (car R))
           (list (car (cdr L)) (car (cdr R))))]
    [else '()]))

  #|
  # mconcat - Dado dos listas, regresa la concatenación de ambas listas.
  |#

(define(mconcat lst lst1)
  [cond
    [(empty? lst) lst1] ;si la lista lst es vacia.
    [(empty? lst1) lst] ;si la lista lst1 es vacia.
    [else(cons(car lst) (mconcat (cdr lst) lst1))]]) ;Se crea una lista con el car de lst y la llamada recursiva del cdr de lst y lst1.

#|
#Regresa una lista con la aplicación de la función a cada elemento de la lista.
|#

(define(mmap func lst)
  [cond
    [(empty? lst) '()] ;Caso base: sí la lista está vacia.
    [else( cons (func(car lst)) (mmap func (cdr lst))) ]]) ;Hago una lista con la aplicación de la
;función al car de la lista dada y la llamada recursiva con la función aplicada al cdr de la lista dada.

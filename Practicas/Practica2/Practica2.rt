#lang plai

#| ejerccio #1
#             Array - Definir un tipo de dato Array que tenga un constructor de tipo MArray. El entero sirve para definir
#el tama˜no del arreglo
|#



(define-type Array
  [MArray (n number?) (lista list?)])


#| ejerccio #2
#             List - Definir un tipo de dato recursivo llamado MList que tenga a la lista vac´ıa MEmpty y el constructor de
#tipo MCons, i.e.
|#

(define-type MList
  [MEmpty]
  [MCons (n number?)(l MList?)])
  
  
  > (test (MEmpty) (MEmpty))
  
  > (test (MCons 1 (MCons 2  (MEmpty))) (MCons 1 (MCons 2  (MEmpty))))
  
  >  (test (MCons 10 (MCons 12  (MEmpty))) (MCons 10 (MCons 12  (MEmpty))))
  
  >  (test (MCons 10  (MEmpty)) (MCons 10   (MEmpty)))
  
  > (test (MCons 1 (MCons 2 (MCons 3 (MCons 4(MEmpty))))) (MCons 1 (MCons 2 (MCons 3 (MCons 4(MEmpty))))))
  

#| Ejercicio 3: Definir un tipo de dato recursivo llamado NTree que tenga como una hoja nula TLEmpty y un
   constructor de tipo NodeN. |#

(define-type NTree
  [TLEmpty]
  [NodeN (n number?) (l (listof NTree?))])

#|
(test (TLEmpty) (TLEmpty))
(test (NodeN 1 (list (TLEmpty) (TLEmpty) (TLEmpty))) (NodeN 1 (list (TLEmpty) (TLEmpty) (TLEmpty))))
|#

#| ejerccio #4
#             Position - Define un tipo de dato llamado Position que tenga un constructor de tipo 2D-Point que toma
#dos n´umeros reales que indican una posici´on en el plano cartesiano, i.e.
|#
(define-type Position
  [2D-Point (x number?) (y number?)])
  
  >(test (2D-Point (sqrt 9) (- 5 8)) (2D-Point 3 -3) )
  
  >(test (2D-Point 0 1) (2D-Point 0 1) )
  
  > (test (2D-Point 0 0) (2D-Point 0 0) )
  
  > (test (2D-Point 10 -0) (2D-Point 10 -0) )
  
  > (test (2D-Point (* 1 3) 5) (2D-Point 3 5) )


  
#|Ejercicio 5|#
(define-type Figure
  (Circle [centro Position?] [radio number?])
  (Square [esquina Position?] [lado number?])
  (Rectangle [esquina Position?] [ancho number?] [largo number?]))
  
(test (Circle (2D-Point 2 2) 2) (Circle (2D-Point 2 2) 2))
(test (Square (2D-Point 7 3) 15) (Square (2D-Point 7 3) 15))
(test (Rectangle (2D-Point 4 1) 7 9) (Rectangle (2D-Point 4 1) 7 9))


#| Ejercicio 6: Dado un arreglo de tipo Array, una posici ́on y un valor num ́erico v, regresar otro arreglo con
el valor v intercambiado en la posici´on indicada del arreglo original. En caso de que la posici´on sea igual o
mayor al tama˜no especificado en el arreglo, regresar un error Out of bounds. |#

(define (setvalueA array pos val)
  [if(not(Array? array))
     (error 'setvalueA "Unknown Type")
     (if(> pos (- (MArray-n array) 1))
        (error 'setvalueA "Out of bounds")
        (coloca (MArray-lista array) pos val 0))])

(define (coloca array pos val cont)
  [cond
    [(< cont pos) (cons (car array) (coloca (cdr array) pos val (add1 cont)))]
    [(> cont pos) empty]
    [(= cont pos) (cons val (cdr array))]])

#|
(define ar (MArray 5 '(0 0 0 0 0)))
(test (setvalueA ar 2 4) '(0 0 4 0 0))
(test (setvalueA ar 1 5) '(0 5 0 0 0))
(test (setvalueA ar 0 10) '(10 0 0 0 0))
|#


#| ejerccio #7
#              MArray2MList - Dado un arreglo de tipo MArray, regresar una lista de tipo MList que contenga todos los
#elementos del arreglo original, i.e.
|#

(define (MArray2MList array)
  (type-case Array array
    [MArray (length lst)
            (cond
              [[empty? lst] (MEmpty)]
              [else (MCons (car lst) (MArray2MList (MArray length (cdr lst))))]
              )
            ]
    
  ))
  
  > (test (MCons 1 (MEmpty)) (MCons 1 (MEmpty)))
  > (test (MArray2MList (MArray 5 '(1 2 ))) (MCons 1 (MCons 2 (MEmpty))) )


#| ejerccio #8 |#

(define (printML lis)
  (if (MEmpty? lis)
      "[]"
      (if(MEmpty? (MCons-l lis))
        (string-append "[" (~a (MCons-n lis)) "]")
         (string-append "[" (aux_printML lis) "]"))))
 
(define (aux_printML lis)
  (if (MEmpty? lis)
      ""
      (if(MEmpty? (MCons-l lis))
         (string-append (~a (MCons-n lis)))
         (string-append (~a (MCons-n lis)) ", " (aux_printML (MCons-l lis))))))




#| Ejercicio 9: Dadas dos listas de tipo MList, regresar la concatenaci ́on. |#

(define (concatML lst lst1)
  [cond
    [(MEmpty? lst) lst1]
    [(MEmpty? lst1) lst]
    [else (MCons (MCons-n lst) (concatML (MCons-l lst) lst1))]])

#|
(test (concatML (MCons 7 (MCons 4 (MEmpty))) (MCons 1 (MEmpty)))
      (MCons 7 (MCons 4 (MCons 1 (MEmpty)))) )

(test (concatML (MCons 4 (MEmpty)) (MCons 2 (MEmpty)))
      (MCons 4 (MCons 2 (MEmpty))) )

(test (concatML (MCons 3 (MEmpty)) (MCons 1 (MEmpty)))
      (MCons 3 (MCons 1 (MEmpty))) )
|#


#| ejerccio #10
#      lengthML - Dada una lista de tipo MLista, regresar la cantidad de elementos que tiene, i.e
|#

(define (lengthML Lista)
  {type-case MList Lista
      [MEmpty () 0]
      [MCons (valor resLista)
             (+ 1 (lengthML  resLista))
             ]
    })

#| ejerccio #11 |#

(define (mapML f lis)
  (cond
    [(MEmpty? lis) (MEmpty)]
    [else (MCons (f (MCons-n lis)) (mapML f (MCons-l lis)))]))


#| Ejercicio 12: Dada una lista de tipo MLista y un predicado de un argumento, regresar una lista de tipo MLista
sin los elementos que al aplicar el predicado, regresa falso. |#

(define (filterML lst pred)
  (type-case MList lst
    [MEmpty () (MEmpty)]
    [MCons (n l) (if (pred n)
                     (MCons n (filterML l pred))
                     (filterML l pred))]))

#|
(define lst (MEmpty))
(test (filterML lst (lambda (x) (not (zero? x)))) (MEmpty))

(define lst1 (MCons 3 (MEmpty)))
(test (filterML lst1 (lambda (x) (not (zero? x)))) (MCons 3 (MEmpty)))

(define lst2 (MCons 5 (MCons 7 (MEmpty))))
(test (filterML lst2 (lambda (x) (not (zero? x)))) (MCons 5 (MCons 7 (MEmpty))))
|#


#| ejerccio #13


|#


#| ejerccio #14


|#



#| ejerccio #15


|#



#| ejerccio #16


|#


#| ejerccio #17 |#

(define (area Figure)
  (cond
    [(Circle? Figure) (* pi (* (Circle-radio Figure) (Circle-radio Figure)))]
    [(Square? Figure) (*(Square-lado Figure) (Square-lado Figure))]
    [(Rectangle? Figure)(*(Rectangle-ancho Figure)(Rectangle-largo Figure))]))


#| Ejercicio 18: Dada una figura fig del tipo Figure y una posici ́on p del tipo 2D-Point regresa #t si p esta
dentro de fig y #f en caso contrario. |#

(define (in-figure? fig pos)
  (type-case Figure fig
    [Circle (centro radio) (type-case Position pos
                             [2D-Point (x y) (if (<= (sqrt (+ (sqr(- x (X centro))) (sqr(- y (Y centro))))) radio) #t #f)])]
    [Rectangle (esquina an lar) (if (and (>= (X pos) (X esquina)) (<= (X pos) (+ an (X esquina)))
                                              (>= (Y pos) (Y esquina)) (<= (Y pos) (+ lar (Y esquina)))) #t #f)]
    [Square (esquina lado) (if (and (>= (X pos) (X esquina))
                                     (<= (X pos)(+ lado (X esquina)))
                                     (>= (Y pos) (Y esquina))
                                     (<= (Y pos)(+ lado (Y esquina)))) #t #f)]))

;Método auxiliar.
(define (X pos)
  (type-case Position pos
    [2D-Point (x y) x]))
;Método auxiliar.
(define (Y pos)
  (type-case Position pos
    [2D-Point (x y) y]))

#|
(test (in-figure? (Circle (2D-Point 5 5) 4) (2D-Point 6 6)) #t)
(test (in-figure? (Square (2D-Point 2 3) 4) (2D-Point 2 2)) #f)
(test (in-figure? (Rectangle (2D-Point 6 7) 4 6) (2D-Point 3 2)) #f)
|#




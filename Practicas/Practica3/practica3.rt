#lang plai

(define-type HRZ
  [resting (low number?)
           (high number?)]
  [warm-up (low number?)
           (high number?)]
  [fat-burning (low number?)
               (high number?)]
  [aerobic (low number?)
           (high number?)]
  [anaerobic (low number?)
             (high number?)]
  [maximum (low number?)
           (high number?)])

(define-type Coordinate
  [GPS (lat number?)
       (long number?)])

(define-type Frame
  [trackpoint (loc GPS?)
              (hr exact-integer?)
              (zone HRZ?)
              (unix-time exact-integer?)])


;Ejercicio 1
(define (zones re max)
  (define (zonesaux i ra re lst)
    (cond
      [(= i 0) (let ([lst (append lst (list (resting re (- (+ re (* ra (+ 0.5 (* 0.1 i)))) 1))))])
                 (zonesaux (+ i 1) ra re lst))]
      [(= i 1 )(let ([lst (append lst (list (warm-up (+ re (* ra (+ 0.5 (* 0.1 (- i 1)))))  
                                         (- (+ re (* ra (+ 0.5 (* 0.1 i)))) 1))))])
                 (zonesaux (+ i 1) ra re lst))]
      [(= i 2 )(let ([lst (append lst (list (fat-burning (+ re (* ra (+ 0.5 (* 0.1 (- i 1)))))  
                                         (- (+ re (* ra (+ 0.5 (* 0.1 i)))) 1))))])
                 (zonesaux (+ i 1) ra re lst))]
      [(= i 3 )(let ([lst (append lst (list (aerobic (+ re (* ra (+ 0.5 (* 0.1 (- i 1)))))  
                                         (- (+ re (* ra (+ 0.5 (* 0.1 i)))) 1))))])
                 (zonesaux (+ i 1) ra re lst))]
      [(= i 4 )(let ([lst (append lst (list (anaerobic (+ re (* ra (+ 0.5 (* 0.1 (- i 1)))))  
                                         (- (+ re (* ra (+ 0.5 (* 0.1 i)))) 1))))])
                 (zonesaux (+ i 1) ra re lst))]
      [(= i 5 )(let ([lst (append lst (list (maximum (+ re (* ra (+ 0.5 (* 0.1 (- i 1)))))  
                                         (+ re (* ra (+ 0.5 (* 0.1 i)))) )))])
                 lst)]))
  (cond
    [(not (number? re)) error "El primer parametro no es del tipo especificado"]
    [(not (number? max)) error "El segundo parametro no es del tipo especificado"]
    [else (zonesaux 0 (- max re) re '())]))


;(define my-zones (zones 50 180))

;Ejercicio 2

(define (get-zone symbol lst)
  (cond
    [(empty? lst) error "La lista esta vacia"]
    [(not (symbol? symbol)) error "El primer parametro no es un simbolo"]
    [(not (list? lst)) error "El primer parametro no es un simbolo"]
    [(and (eq? 'resting symbol) (resting? (car lst))) (car lst)]
    [(and (eq? 'warm-up symbol) (warm-up? (car lst))) (car lst)]
    [(and (eq? 'fat-burning symbol) (fat-burning? (car lst))) (car lst)]
    [(and (eq? 'aerobic symbol) (aerobic? (car lst))) (car lst)]
    [(and (eq? 'anaerobic symbol) (anaerobic? (car lst))) (car lst)]
    [(and (eq? 'maximum symbol) (maximum? (car lst))) (car lst)]
    [else (get-zone symbol (cdr lst))]))



   (define (create-trackpoints lista zone)
    (cond
      [(empty? lista) '()]
      [else
       (define loc (GPS (first (second (car lista))) (second (second (car lista)))))
       (define hr (third (car lista)))
       (define zone (zone 'resting zone))
       (define time (first (car lista)))
       (cons (trackpoint loc hr zone time) (create-trackpoints (cdr lista) zone))]))
       
  ;Ejercicio 3
       
  (define (bpm->zone lisa lisb)
    (define (aux frecu lis)
      (cond
        [(empty? lis) "Lista vacia."]
        [(and (resting? (car lis)) 
           (<= (resting-low (car lis)) frecu) 
           (>= (resting-high (car lis)) frecu)) (car lis)]
        [(and (warm-up? (car lis)) 
           (<= (warm-up-low (car lis)) frecu) 
           (>= (warm-up-high (car lis)) frecu)) (car lis)]
        [(and (fat-burning? (car lis)) 
           (<= (fat-burning-low (car lis)) frecu) 
           (>= (fat-burning-high (car lis)) frecu)) (car lis)]
        [(and (anaerobic? (car lis)) 
           (<= (anaerobic-low (car lis)) frecu) 
           (>= (anaerobic-high (car lis)) frecu)) (car lis)]
        [(and (aerobic? (car lis)) 
           (<= (aerobic-low (car lis)) frecu) 
           (>= (aerobic-high (car lis)) frecu)) (car lis)]
        [(and (maximum? (car lis)) 
           (<= (maximum-low (car lis)) frecu) 
           (>= (maximum-high (car lis)) frecu)) (car lis)]
        [else (aux frecu (cdr lis))]))
      (define (aux0 lisa lisb zon) 
        (cond
          [(empty? lisa) '()]
          [else (append (list (aux (car lisa) lisb)) (aux0 (cdr lisa) lisb zon) )]))
      (cond
        [(not (list? lisa)) error "El primer parametro no es una lista."]
        [(not (list? lisb)) error "El segundo parametro no es una lista."]
        [else (aux0 lisa lisb '())]))
